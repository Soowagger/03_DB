-- 1. 카테고리 테이블
CREATE TABLE CATEGORIES(
    CATEGORY_ID NUMBER CONSTRAINT PK_CATEGORY_ID PRIMARY KEY,
    CATEGORY_NAME VARCHAR2(100) CONSTRAINT UK_CATEGORY_NAME UNIQUE
);

COMMENT ON COLUMN CATEGORIES.CATEGORY_ID IS '카테고리 ID';
COMMENT ON COLUMN CATEGORIES.CATEGORY_NAME IS '카테고리 이름';


-- 2. 상품정보 테이블
CREATE TABLE PRODUCTS(
    PRODUCT_ID NUMBER CONSTRAINT PK_PRODUCT_ID PRIMARY KEY,
    PRODUCT_NAME VARCHAR2(100) CONSTRAINT NN_PRODUCT_NAME NOT NULL,
    CATEGORY NUMBER CONSTRAINT FK_CATEGORY REFERENCES CATEGORIES(CATEGORY_ID),
    PRICE NUMBER DEFAULT 0,
    STOCK_QUANTITY NUMBER DEFAULT 0
);

COMMENT ON COLUMN PRODUCTS.PRODUCT_ID IS '상품 코드';
COMMENT ON COLUMN PRODUCTS.PRODUCT_NAME IS '상품 이름';
COMMENT ON COLUMN PRODUCTS.CATEGORY IS '카테고리';
COMMENT ON COLUMN PRODUCTS.PRICE IS '가격';
COMMENT ON COLUMN PRODUCTS.STOCK_QUANTITY IS '재고량';


-- 3. 고객 정보 테이블
CREATE TABLE CUSTOMERS(
    CUSTOMER_ID NUMBER CONSTRAINT PK_CUSTOMER_ID PRIMARY KEY,
    NAME VARCHAR2(20) CONSTRAINT NN_NAME NOT NULL,
    GENDER CHAR(3) CONSTRAINT CK_GEN CHECK ( GENDER IN ('남', '여') ),
    ADDRESS VARCHAR2(100),
    PHONE VARCHAR2(30)
);

COMMENT ON COLUMN CUSTOMERS.CUSTOMER_ID IS '고객 ID';
COMMENT ON COLUMN CUSTOMERS.NAME IS '이름';
COMMENT ON COLUMN CUSTOMERS.GENDER IS '성별';
COMMENT ON COLUMN CUSTOMERS.ADDRESS IS '주소';
COMMENT ON COLUMN CUSTOMERS.PHONE IS '전화번호';


-- 4.주문 정보 테이블
CREATE TABLE ORDERS(
    ORDER_ID NUMBER CONSTRAINT PK_ORDER_ID PRIMARY KEY,
    CUSTOMER_ID NUMBER CONSTRAINT FK_CUSTOMER_ID 
                REFERENCES CUSTOMERS(CUSTOMER_ID) ON DELETE CASCADE,
    ORDER_DATE DATE DEFAULT SYSDATE,
    STATUS CHAR(1) DEFAULT 'N' CONSTRAINT CK_STATUS CHECK (STATUS IN ('Y','N'))
);

COMMENT ON COLUMN ORDERS.ORDER_ID IS '주문 번호';
COMMENT ON COLUMN ORDERS.CUSTOMER_ID IS '고객 ID';
COMMENT ON COLUMN ORDERS.ORDER_DATE IS '주문일';
COMMENT ON COLUMN ORDERS.STATUS IS '처리상태';


-- 5. 주문 상세 정보 테이블
CREATE TABLE ORDER_DETAILS(
    ORDER_DETAIL_ID NUMBER CONSTRAINT PK_ORDER_DETAIL_ID PRIMARY KEY,
    ORDER_ID NUMBER CONSTRAINT FK_ORDER_ID REFERENCES ORDERS ON DELETE CASCADE,
    PRODUCT_ID NUMBER CONSTRAINT FK_PRODUCT_ID REFERENCES PRODUCTS ON DELETE SET NULL,
    QUANTITY NUMBER,
    PRICE_PER_UNIT NUMBER
);

COMMENT ON COLUMN ORDER_DETAILS.ORDER_DETAIL_ID IS '주문 상세 ID';
COMMENT ON COLUMN ORDER_DETAILS.ORDER_ID IS '주문 번호';
COMMENT ON COLUMN ORDER_DETAILS.PRODUCT_ID IS '상품코드';
COMMENT ON COLUMN ORDER_DETAILS.QUANTITY IS '수량';
COMMENT ON COLUMN ORDER_DETAILS.PRICE_PER_UNIT IS '가격';


-- CATEGORIES 테이블 샘플 데이터
INSERT INTO CATEGORIES VALUES(1, '스마트폰');
INSERT INTO CATEGORIES VALUES(2, 'TV');
INSERT INTO CATEGORIES VALUES(3, 'Gaming');
SELECT * FROM CATEGORIES;

-- PRODUCTS 테이블 샘플 데이터
INSERT INTO PRODUCTS VALUES(101, 'Apple iPhone 12', 1, 1500000, 30);
INSERT INTO PRODUCTS VALUES(102, 'Samsung Galaxy S24', 1, 1800000, 50);
INSERT INTO PRODUCTS VALUES(201, 'LG OLED TV', 2, 3600000, 10);
INSERT INTO PRODUCTS VALUES(301, 'Sony PlayStation 5', 3, 700000, 15);
SELECT * FROM PRODUCTS;

-- CUSTOMERS 테이블 샘플 데이터
INSERT INTO CUSTOMERS VALUES(1, '홍길동', '남', '서울시 성동구 왕십리', '010-1111-2222');
INSERT INTO CUSTOMERS VALUES(2, '유관순', '여', '서울시 종로구 안국동', '010-3333-1111');
SELECT * FROM CUSTOMERS;

DELETE FROM ORDERS;

-- ORDERS 테이블 샘플 데이터
INSERT INTO ORDERS VALUES(576, 1, '2024-02-29', DEFAULT);
INSERT INTO ORDERS VALUES(978, 2, '2024-03-11', 'Y');
INSERT INTO ORDERS VALUES(777, 2, '2024-03-11', 'N');
INSERT INTO ORDERS VALUES(134, 1, '2022-12-25', 'Y');
INSERT INTO ORDERS VALUES(499, 1, '2020-01-03', 'Y');
SELECT * FROM ORDERS;


-- ORDER_DETAILS 테이블 샘플 데이터
INSERT INTO ORDER_DETAILS VALUES(111, 576, 101, 1, 1500000);
INSERT INTO ORDER_DETAILS VALUES(222, 978, 201, 2, 3600000);
INSERT INTO ORDER_DETAILS VALUES(333, 978, 102, 1, 1800000);
INSERT INTO ORDER_DETAILS VALUES(444, 777, 301, 5, 700000);
INSERT INTO ORDER_DETAILS VALUES(555, 134, 102, 1, 1800000);
INSERT INTO ORDER_DETAILS VALUES(666, 499, 201, 3, 3600000);
SELECT * FROM ORDER_DETAILS;


/*
1. 쇼핑몰 관리자가 주문은 받았으나, 아직 처리가 안된 주문을 처리하려고 한다. 
현재 주문 내역 중 아직 처리되지 않은 주문을 조회하시오. 😀
(고객명, 주문일, 처리상태)
 */
SELECT 
    NAME "고객명",
    ORDER_DATE "주문일",
    STATUS "처리상태"
FROM ORDERS
JOIN CUSTOMERS USING(CUSTOMER_ID)
WHERE STATUS = 'N';

/*
2. 홍길동 고객이 이번년도에 본인이 주문한 전체 내역을 조회하고자 한다. 
주문번호, 주문날짜, 처리상태 조회하시오 😀
*/

SELECT 
    ORDER_ID "주문번호",
    ORDER_DATE "주문날짜",
    STATUS "처리상태"
FROM ORDERS
NATURAL JOIN CUSTOMERS
WHERE EXTRACT(YEAR FROM ORDER_DATE) = 2024
AND NAME = '홍길동';


/*
3. 유관순 고객이 지금껏 주문한 상품의 수량 별 금액을 조회하려고 한다.
주문번호, 상품명, 수량, 개별금액, 주문별금액을 조회하시오 😀
*/

SELECT 
    ORDER_ID "주문번호",
    PRODUCT_NAME "상품명",
    QUANTITY "수량",
    PRICE_PER_UNIT "개별금액",
    SUM(QUANTITY * PRICE_PER_UNIT) "주문별금액"
FROM ORDERS 
NATURAL JOIN  ORDER_DETAILS
NATURAL JOIN PRODUCTS
NATURAL JOIN CUSTOMERS
WHERE NAME = '유관순'
GROUP BY ORDER_ID, PRODUCT_NAME, QUANTITY, PRICE_PER_UNIT
ORDER BY 수량 DESC;